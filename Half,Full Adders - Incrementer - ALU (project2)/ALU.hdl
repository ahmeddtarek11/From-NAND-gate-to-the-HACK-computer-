
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

//zx 16bit part if zx: all bits = 0 else nothing 
Mux16(a=x, b[0..15]=false, sel=zx, out=zxout);

//zy 16bit part if zy: all bits = 0 else nothing 
Mux16(a=y, b[0..15]=false, sel=zy, out=zyout);

//handling nx selection bit , if nx: negitiate(bitwise not) x else nothing
Not16(in=zxout, out=notzxout);
Mux16(a=zxout, b=notzxout, sel=nx, out=xout);

//handling ny selection bit , if ny: negitiate(bitwise not) y else nothing
Not16(in=zyout, out=notzyout);
Mux16(a=zyout, b=notzyout, sel=ny, out=yout);


//handling f selection bit if f: then x+y else x&y
And16(a=xout, b=yout, out=xANDy);
Add16(a=xout, b=yout, out=xPLUSy);
Mux16(a=xANDy, b=xPLUSy, sel=f, out=fout);


//handling "no" selection bit if no:bitwise not to output else leave it as it is 
//and handling ng 
Not16(in=fout, out=notfout);
Mux16(a=fout, b=notfout, sel=no, out=out , out[15]=ng,out[0..7]=zrlow,out[8..15]=zrhigh);

//handling zr flag  
//zr      if (out == 0) equals 1, else 0

Or8Way(in=zrlow, out=orlow);
Or8Way(in=zrhigh, out=orhigh);
Or(a=orlow, b=orhigh, out=orzr);
Not(in=orzr, out=zr);








}